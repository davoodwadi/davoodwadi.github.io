{"title":"Linear least squares","markdown":{"yaml":{"title":"","format":{"html":{"code-fold":false}},"jupyter":"python3","execute":{"cache":true}},"headingText":"Linear least squares","containsRefs":false,"markdown":"\n\n\nLinear least squares is a technique used for regression problems, where we aim to predict continuous numerical values. However, it can also be used for classification tasks by transforming the problem into a binary classification problem.\n\nIn linear least squares for classification, we use a linear model to classify data into two classes. We assign class labels of -1 and 1 to the two classes. The goal is to find a linear boundary that best separates the two classes, minimizing the sum of squared distances between the data points and the decision boundary.\n\nLet's see how we can do this in Python:\n\nFirst, we need to import the required libraries: numpy and matplotlib.\n\n```{python}\nimport numpy as np\nimport matplotlib.pyplot as plt\n```\n\nNext, let's generate some synthetic data with two classes. We will use the `make_classification` function from the `sklearn.datasets` module to create a random dataset.\n\n```{python}\nfrom sklearn.datasets import make_classification\n\nnp.random.seed(0)\nX, y = make_classification(n_samples=100, n_features=1, n_informative=1, n_redundant=0, n_clusters_per_class=1)\n```\n\nWe have created a dataset with 100 samples, 1 feature, and 1 informative features.\n\nNow, let's visualize the data using a scatter plot:\n\n```{python}\nplt.scatter(X[y == 1], y[y == 1], color='b', label='Class 1')\nplt.scatter(X[y == 0], y[y == 0], color='r', label='Class 0')\nplt.xlabel('Feature')\nplt.ylabel('Label')\nplt.legend()\nplt.show()\n```\n\nWe have plotted the data points for each class on a scatter plot.\n\nTo apply linear least squares for classification, we need to add a column of ones to our feature matrix X to incorporate the bias term in the linear equation.\n\n```{python}\nX = np.concatenate((np.ones((X.shape[0], 1)), X), axis=1)\n```\n\nNow, let's define our linear model and solve for the optimal parameters using linear least squares.\n\n```{python}\ntheta = np.linalg.inv(X.T @ X) @ X.T @ y\n```\n\nHere, `theta` is the vector of parameters that defines our linear model. The equation used to solve for `theta` is:\n\n\n$\\theta = (X^T X)^{-1} X^T y$\n\nFinally, let's visualize the decision boundary of our linear model along with the data points.\n\n```{python}\nplt.scatter(X[y == 1][:,1], y[y == 1], color='b', label='Class 1')\nplt.scatter(X[y == 0][:,1], y[y == 0], color='r', label='Class 0')\nplt.xlabel('Feature')\nplt.ylabel('Label')\nplt.legend()\n\n# Plotting the decision boundary\nx_boundary = np.linspace(np.min(X[:, 1]), np.max(X[:, 1]), 100)\n# x2_boundary = -(theta[0] + theta[1]*x1_boundary) / theta[2]\ny_boundary = x_boundary * theta[1] +  theta[0]\nplt.plot(x_boundary, y_boundary, color='black', linewidth=2)\n\nplt.show()\n```\n\n\n\nWe have plotted the decision boundary determined by our linear model, which separates the two classes.\n\nLinear least squares for classification is a simple technique for linearly separable datasets. Note that this approach assumes the data points are linearly separable and does not work well for nonlinear classification problems.","srcMarkdownNoYaml":"\n\n### Linear least squares\n\nLinear least squares is a technique used for regression problems, where we aim to predict continuous numerical values. However, it can also be used for classification tasks by transforming the problem into a binary classification problem.\n\nIn linear least squares for classification, we use a linear model to classify data into two classes. We assign class labels of -1 and 1 to the two classes. The goal is to find a linear boundary that best separates the two classes, minimizing the sum of squared distances between the data points and the decision boundary.\n\nLet's see how we can do this in Python:\n\nFirst, we need to import the required libraries: numpy and matplotlib.\n\n```{python}\nimport numpy as np\nimport matplotlib.pyplot as plt\n```\n\nNext, let's generate some synthetic data with two classes. We will use the `make_classification` function from the `sklearn.datasets` module to create a random dataset.\n\n```{python}\nfrom sklearn.datasets import make_classification\n\nnp.random.seed(0)\nX, y = make_classification(n_samples=100, n_features=1, n_informative=1, n_redundant=0, n_clusters_per_class=1)\n```\n\nWe have created a dataset with 100 samples, 1 feature, and 1 informative features.\n\nNow, let's visualize the data using a scatter plot:\n\n```{python}\nplt.scatter(X[y == 1], y[y == 1], color='b', label='Class 1')\nplt.scatter(X[y == 0], y[y == 0], color='r', label='Class 0')\nplt.xlabel('Feature')\nplt.ylabel('Label')\nplt.legend()\nplt.show()\n```\n\nWe have plotted the data points for each class on a scatter plot.\n\nTo apply linear least squares for classification, we need to add a column of ones to our feature matrix X to incorporate the bias term in the linear equation.\n\n```{python}\nX = np.concatenate((np.ones((X.shape[0], 1)), X), axis=1)\n```\n\nNow, let's define our linear model and solve for the optimal parameters using linear least squares.\n\n```{python}\ntheta = np.linalg.inv(X.T @ X) @ X.T @ y\n```\n\nHere, `theta` is the vector of parameters that defines our linear model. The equation used to solve for `theta` is:\n\n\n$\\theta = (X^T X)^{-1} X^T y$\n\nFinally, let's visualize the decision boundary of our linear model along with the data points.\n\n```{python}\nplt.scatter(X[y == 1][:,1], y[y == 1], color='b', label='Class 1')\nplt.scatter(X[y == 0][:,1], y[y == 0], color='r', label='Class 0')\nplt.xlabel('Feature')\nplt.ylabel('Label')\nplt.legend()\n\n# Plotting the decision boundary\nx_boundary = np.linspace(np.min(X[:, 1]), np.max(X[:, 1]), 100)\n# x2_boundary = -(theta[0] + theta[1]*x1_boundary) / theta[2]\ny_boundary = x_boundary * theta[1] +  theta[0]\nplt.plot(x_boundary, y_boundary, color='black', linewidth=2)\n\nplt.show()\n```\n\n\n\nWe have plotted the decision boundary determined by our linear model, which separates the two classes.\n\nLinear least squares for classification is a simple technique for linearly separable datasets. Note that this approach assumes the data points are linearly separable and does not work well for nonlinear classification problems."},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":true,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":false,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../styles.css"],"toc":true,"output-file":"Linear_classification.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.55","theme":"cosmo","title":"","jupyter":"python3"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}