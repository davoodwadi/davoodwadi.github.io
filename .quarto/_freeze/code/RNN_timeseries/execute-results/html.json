{
  "hash": "575a36b150bf21a84a24fbec08c5b82e",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"\"\nformat:\n  html:\n    code-fold: false\njupyter: python3\nexecute: \n  cache: true\n---\n\n\n\n\n\nIn this tutorial, I will explain how to use a Recurrent Neural Network (RNN) to predict time series data using the PyTorch library. \n\nFirst, let's start by installing the required packages. We need to install PyTorch and matplotlib for visualization.\n\n```\n!pip install torch\n!pip install matplotlib\n```\n\nNow that we have the necessary packages installed, let's import them into our code.\n\n::: {#fc583c9e .cell execution_count=1}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\n```\n:::\n\n\n::: {#077f961c .cell execution_count=2}\n``` {.python .cell-code}\nimport torch\nimport torch.nn as nn\nimport numpy as np\nimport matplotlib.pyplot as plt\n```\n:::\n\n\nThe next step is to generate some synthetic time series data for training our model. We will generate a sine wave with some added noise.\n\n::: {#ffd8653e .cell execution_count=3}\n``` {.python .cell-code}\n# Set random seed for reproducibility\ntorch.manual_seed(0)\n\n# Generate time points\nnum_points = 1000\nt = torch.arange(0, num_points)\n\n# Generate sine wave\nvalue = torch.sin(0.1*t)\n\n# Add noise\nvalue += 0.2*torch.randn(num_points)\n```\n:::\n\n\nLet's visualize the generated time series using matplotlib.\n\n::: {#9b7276a8 .cell execution_count=4}\n``` {.python .cell-code}\nplt.figure(figsize=(10, 6))\n# using .tolist method instead of\n# .numpy() because of dependency issues\n# in numpy>2 and torch>2\nplt.plot(t, value)\nplt.xlabel('Time')\nplt.ylabel('Value')\nplt.title('Time Series Data')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](RNN_timeseries_files/figure-html/cell-5-output-1.png){width=823 height=523}\n:::\n:::\n\n\nNow, we need to prepare our data for training the RNN. We will split the data into input sequences and corresponding output sequences. Each input sequence will contain a certain number of time steps (e.g., 10), and the corresponding output sequence will be the next time step.\n\n::: {#c6a7294b .cell execution_count=5}\n``` {.python .cell-code}\n# Define number of time steps for input sequence\nnum_steps = 10\n\n# Split data into input and output sequences\nx = []\ny = []\nfor i in range(len(value) - num_steps):\n    # creating list of x; each item has num_steps values\n    x.append(value[i:i+num_steps])\n    # creating list of y; each item has the next value\n    y.append(value[i+num_steps])\n\n# Convert data to PyTorch tensors\n# turning list x to tensor & adding new dimension (input size) at the end\nx = torch.stack(x)[..., None]\n# turning list y to tensor & adding new dimension at the end\ny = torch.stack(y)[..., None]\n\nx_train = x[0:100]\nx_test = x[100:]\n\ny_train = y[0:100]\ny_test = y[100:]\n\nprint(x_train.shape)\nprint(y_train.shape)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntorch.Size([100, 10, 1])\ntorch.Size([100, 1])\n```\n:::\n:::\n\n\nNext, we need to define our RNN model using the nn.RNN module from PyTorch.\n\n::: {#1bf1ce5f .cell execution_count=6}\n``` {.python .cell-code}\n# Define RNN model\nclass RNN(nn.Module):\n    def __init__(self, input_size, hidden_size, output_size):\n        super(RNN, self).__init__()\n        self.hidden_size = hidden_size\n        # If batch_first=True, then the input and output tensors are provided as (batch, seq, feature)\n        self.rnn = nn.RNN(input_size, hidden_size, batch_first=True)\n        # nn.Linear to transform hidden state from hidden_size to output_size\n        self.fc = nn.Linear(hidden_size, output_size)\n    \n    def init_h(self, x):\n        '''\n        To initialize the hidden state for the first iteration\n        shape: d x num_layers, N, H if input is batched (our case)\n        shape: d x num_layers, H if input not batched\n        d: 2 if bidirectional else 1\n        N: batch size\n        H: hidden_size\n        num_layers: number of RNN layers\n        '''\n        batch_size = x.shape[0]\n        self.h0 = torch.zeros(1, batch_size, self.hidden_size, requires_grad=True)\n        return self.h0\n\n    def forward(self, x, hidden):\n        # shape: N, L, DxH \n        # shape: 990, 10, 16\n        out, hidden = self.rnn(x, hidden)\n        # choose the last output of out: out[:, -1, :]\n        # pass it to the fc layer\n        out = self.fc(out[:, -1, :])\n        return out, hidden\n\n# Create an instance of the RNN model\ninput_size = 1\nhidden_size = 16\noutput_size = 1\nmodel = RNN(input_size, hidden_size, output_size)\n```\n:::\n\n\nNote that the `self.fc = nn.Linear(hidden_size, output_size)` transforms the hidden state from `hidden_size` to `output_size`. This is a useful use case of fully connected layers, which helps us transform our feature space from $n$ dimensions to $n\\prime$ dimensions.\n\n\nBefore training our model, we need to define the loss function and optimizer.\n\n::: {#356e7f1a .cell execution_count=7}\n``` {.python .cell-code}\n# Define loss function and optimizer\ncriterion = nn.MSELoss()\noptimizer = torch.optim.Adam(model.parameters(), lr=0.01)\n```\n:::\n\n\nNow, we can train our RNN model using a loop. We will iterate over the data for a certain number of epochs and update the model parameters based on the computed loss.\n\n::: {#e71b78b2 .cell execution_count=8}\n``` {.python .cell-code}\n# Set number of epochs\nnum_epochs = 100\n# initialize the hidden state\nh = model.init_h(x_train)\n# Train the model\nfor epoch in range(num_epochs):\n    # Forward pass\n    output, h = model(x_train, h)\n    loss = criterion(output, y_train)\n    \n    # Backward and optimize\n    loss.backward()\n    optimizer.step()\n    # set the gradients of the model tensors to zero\n    optimizer.zero_grad()\n    # detach h from the computation graph\n    h.detach_()\n    \n    # Print progress\n    if (epoch+1) % 10 == 0:\n        print(f'Epoch [{epoch+1}/{num_epochs}], Loss: {loss.item():.4f}')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nEpoch [10/100], Loss: 0.1675\nEpoch [20/100], Loss: 0.0974\nEpoch [30/100], Loss: 0.0782\nEpoch [40/100], Loss: 0.0725\nEpoch [50/100], Loss: 0.0709\nEpoch [60/100], Loss: 0.0692\nEpoch [70/100], Loss: 0.0683\nEpoch [80/100], Loss: 0.0675\nEpoch [90/100], Loss: 0.0666\nEpoch [100/100], Loss: 0.0657\n```\n:::\n:::\n\n\nFinally, let's visualize the predicted values and compare them with the ground truth.\n\n::: {#d051397f .cell execution_count=9}\n``` {.python .cell-code}\nh = model.init_h(x_test)\n# Generate predictions\nwith torch.no_grad():\n    y_pred, h = model(x_test, h)\n# Plot the results\nplt.figure(figsize=(10, 6))\nplt.plot(t.tolist(), value.tolist(), label='Ground Truth')\nplt.plot(t[10:110].tolist(), output.detach().tolist(), label='Predicted train')\nplt.plot(t[110:].tolist(), y_pred.detach().tolist(), label='Predicted test')\nplt.xlabel('Time')\nplt.ylabel('Value')\nplt.title('Time Series Prediction')\nplt.legend()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](RNN_timeseries_files/figure-html/cell-10-output-1.png){width=823 height=523}\n:::\n:::\n\n\n",
    "supporting": [
      "RNN_timeseries_files"
    ],
    "filters": [],
    "includes": {}
  }
}