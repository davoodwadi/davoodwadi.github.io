{"title":"Python Basics","markdown":{"yaml":{"title":"Python Basics"},"headingText":"Loading necessary packages","containsRefs":false,"markdown":"\n\n\n\n\n\n\nTo start let's load `NumPy`, a package for scientific computing with Python. We usually load it as the `np` shorthand.\n\nLet's initialize two arrays\n\n## Dot product\nTo perform a dot product of two arrays, the `shape` of the arrays should match. Let's get the shape of our arrays.\n\nboth arrays have a shape of $(1, 5)$.\n\nIn general, the shape of the two arrays should be\n$(n, k) (k, m)$, where $k$ is the common dimension of the two arrays.\n\nFor our example, we can transpose the array `b` to make the shapes match. The `NumPy` command for transposition of arrays is `.T`.\n\nNow that the two arrays have the matching shapes, we can calculate their dot product using the `@` operator.\n\nThe result of the dot product is an array of shape $(1,1)$, or a scalar. In general, the result of a dot product has a shape of $(n, m)$\n\n## Best fit line\nLet us now simulate a some data and find the **best fit line**, a line that minimizes the average distance of all data points to the line.\n\nHere our `X` is a vector of shape $(100, 1)$ samples from a standard normal distribution. Here we have $100$ points with $1$ feature for each point.\n\nThe `y` is 10 times x, with the shape $(100, 1)$.\n\n$$y = X \\cdot coeff$$\n\n# Data visualization\nTo visualize the data, we can use [`Matplotlib`](https://en.wikipedia.org/wiki/Matplotlib), which is a python plotting library inspired by `MATLAB`. While `Matplotlib` is a low-level plotting library with a high level of flexibility, for data science and ML applications, we tend to use `seaborn`. \n\n`seaborn` is a high-level plotting library that contains many common plots (e.g. `countplot`, `distplot`) as pre-built functions. It also has high compatibility with `pandas` dataframes.\n\n\nAs you can see in the scatter plot @fig-scatterxy, $X$ and $y$ form a perfect line, as we didn't add any noise to our $y$ variable. \n\nTo find the *best fit line*, we need to find $a$ in the following equation:\n\n$$y = X \\cdot a$$\n\n$a$ would be a scalar, or an array of shape $(1,)$\n\n# Performance measure\nSince our target variable, $y$, is a continuous variable, we are dealing with a regression task. For regression **M**ean **S**quared **E**rror (MSE) is one of the most common loss functions (i.e. measure of performance).\n$$MSE = \\frac{1}{n} \\sum_{i=1}^{n}{(y_i - \\hat{y}_i)^2}$$\n\nThus, we define a function to calculate the average sum of the squared of the error.\n\nNext, we randomly initialize our a as an array of shape $(1,1)$\n\nWe then calculate our prediction, $\\hat{y}$, which is the dot product of our design matrix, $X$, and $a$.\n\nWe use our `error_function` to measure the error of our random guess for $a$.\n\nUnlike metrics, such as accuracy, loss values have little intuitive meaning for humans.\n\n## Fitting the data using `sklearn`\n\nIn the next session, we will formulate a closed-form solution for finding the parameters of linear regression.\n\nFor now, let's use the [`scikit-learn`](https://scikit-learn.org/) package to find the best line.\n\nWe'll import the `LinearRegression` class from the `linear_model` submodule of `sklearn`. Each submodule of `sklearn` contains classes for that particular topic.\n\nNow, let's create an instance of the `LinearRegression` model and fit it to the data.\n\nMost `sklearn` classes involve two steps:\n1. Instantiating the class. This is where you provide the necessary hyper-parameters.\n    - `model = LinearRegression()`\n2. Fitting the data.\n    - `model.fit(X,y)`\n\nNext, we can retrieve the coefficients of the fitted model by accessing the `.coeff_` attribute of the `model` object.\n\nIn our case, the coefficient is an array of shape $(1,1)$. This is in line with the shape of our X ($n,1$) and y ($n, 1$).\n\nWe can also access the intercept of the `model` using the `.intercept_` attribute. Since we didn't add an intercept in our data simulation, the value of the intercept should be $0$.\n\n*Note.* In numerical computations, very small numbers (e.g. $2 \\times 10^{-16}$) are considered to be $0$.\n\n## Plotting the line on the data\nWe can now plot the line and the data to see the fit.\n\nFirst, we get the predictions from the model using its fitted parameters `a` and `b`.\n\nWe'll use `seaborn` and `Matplotlib` to create two separate plots on the same axis, `ax`.\n\n\n","srcMarkdownNoYaml":"\n\n\n\n\n\n\n## Loading necessary packages\nTo start let's load `NumPy`, a package for scientific computing with Python. We usually load it as the `np` shorthand.\n\nLet's initialize two arrays\n\n## Dot product\nTo perform a dot product of two arrays, the `shape` of the arrays should match. Let's get the shape of our arrays.\n\nboth arrays have a shape of $(1, 5)$.\n\nIn general, the shape of the two arrays should be\n$(n, k) (k, m)$, where $k$ is the common dimension of the two arrays.\n\nFor our example, we can transpose the array `b` to make the shapes match. The `NumPy` command for transposition of arrays is `.T`.\n\nNow that the two arrays have the matching shapes, we can calculate their dot product using the `@` operator.\n\nThe result of the dot product is an array of shape $(1,1)$, or a scalar. In general, the result of a dot product has a shape of $(n, m)$\n\n## Best fit line\nLet us now simulate a some data and find the **best fit line**, a line that minimizes the average distance of all data points to the line.\n\nHere our `X` is a vector of shape $(100, 1)$ samples from a standard normal distribution. Here we have $100$ points with $1$ feature for each point.\n\nThe `y` is 10 times x, with the shape $(100, 1)$.\n\n$$y = X \\cdot coeff$$\n\n# Data visualization\nTo visualize the data, we can use [`Matplotlib`](https://en.wikipedia.org/wiki/Matplotlib), which is a python plotting library inspired by `MATLAB`. While `Matplotlib` is a low-level plotting library with a high level of flexibility, for data science and ML applications, we tend to use `seaborn`. \n\n`seaborn` is a high-level plotting library that contains many common plots (e.g. `countplot`, `distplot`) as pre-built functions. It also has high compatibility with `pandas` dataframes.\n\n\nAs you can see in the scatter plot @fig-scatterxy, $X$ and $y$ form a perfect line, as we didn't add any noise to our $y$ variable. \n\nTo find the *best fit line*, we need to find $a$ in the following equation:\n\n$$y = X \\cdot a$$\n\n$a$ would be a scalar, or an array of shape $(1,)$\n\n# Performance measure\nSince our target variable, $y$, is a continuous variable, we are dealing with a regression task. For regression **M**ean **S**quared **E**rror (MSE) is one of the most common loss functions (i.e. measure of performance).\n$$MSE = \\frac{1}{n} \\sum_{i=1}^{n}{(y_i - \\hat{y}_i)^2}$$\n\nThus, we define a function to calculate the average sum of the squared of the error.\n\nNext, we randomly initialize our a as an array of shape $(1,1)$\n\nWe then calculate our prediction, $\\hat{y}$, which is the dot product of our design matrix, $X$, and $a$.\n\nWe use our `error_function` to measure the error of our random guess for $a$.\n\nUnlike metrics, such as accuracy, loss values have little intuitive meaning for humans.\n\n## Fitting the data using `sklearn`\n\nIn the next session, we will formulate a closed-form solution for finding the parameters of linear regression.\n\nFor now, let's use the [`scikit-learn`](https://scikit-learn.org/) package to find the best line.\n\nWe'll import the `LinearRegression` class from the `linear_model` submodule of `sklearn`. Each submodule of `sklearn` contains classes for that particular topic.\n\nNow, let's create an instance of the `LinearRegression` model and fit it to the data.\n\nMost `sklearn` classes involve two steps:\n1. Instantiating the class. This is where you provide the necessary hyper-parameters.\n    - `model = LinearRegression()`\n2. Fitting the data.\n    - `model.fit(X,y)`\n\nNext, we can retrieve the coefficients of the fitted model by accessing the `.coeff_` attribute of the `model` object.\n\nIn our case, the coefficient is an array of shape $(1,1)$. This is in line with the shape of our X ($n,1$) and y ($n, 1$).\n\nWe can also access the intercept of the `model` using the `.intercept_` attribute. Since we didn't add an intercept in our data simulation, the value of the intercept should be $0$.\n\n*Note.* In numerical computations, very small numbers (e.g. $2 \\times 10^{-16}$) are considered to be $0$.\n\n## Plotting the line on the data\nWe can now plot the line and the data to see the fit.\n\nFirst, we get the predictions from the model using its fitted parameters `a` and `b`.\n\nWe'll use `seaborn` and `Matplotlib` to create two separate plots on the same axis, `ax`.\n\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":true,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":false,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../styles.css"],"toc":true,"output-file":"Session1.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.55","theme":"cosmo","title":"Python Basics"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}