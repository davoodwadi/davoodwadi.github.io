{"title":"Tensors and Arrays","markdown":{"yaml":{"title":"","format":{"html":{"code-fold":false}},"jupyter":"python3","execute":{"cache":true}},"headingText":"Tensors and Arrays","containsRefs":false,"markdown":"\n\n\nSure! PyTorch is a popular open-source machine learning library for Python. It provides an efficient and flexible framework for building deep learning models. Many beginners in PyTorch are already familiar with Numpy, which is another Python library used for numerical computing. In this tutorial, we will introduce PyTorch using the similarities between PyTorch and Numpy.\n\nTo begin, let's start by installing PyTorch using the following command:\n\n```{python}\n#| eval: false \n!pip install torch\n```\n\nAfter installing PyTorch, we can import it into our Python code using the following line:\n\n```{python}\nimport torch\n```\n\nNow, let's draw some comparisons between PyTorch and Numpy.\n\n\nPyTorch uses tensors to store and manipulate data, while Numpy uses arrays. Tensors and arrays behave similarly and share many common operations. For example, creating a tensor/array, accessing elements, and performing basic operations are done in a similar way.\n\nLet's compare how we can create a tensor and an array in PyTorch and Numpy respectively:\n\n```{python}\n# Creating a PyTorch tensor\ntensor = torch.tensor([[1, 2, 3], [4, 5, 6]])\nprint(tensor)\n\n# Creating a Numpy array\nimport numpy as np\narray = np.array([[1, 2, 3], [4, 5, 6]])\nprint(array)\n```\n\nBoth the PyTorch tensor and Numpy array store data in a multi-dimensional structure.\n\n## Accessing Elements\n\nAccessing elements in PyTorch tensors and Numpy arrays is similar, as both use indexing and slicing methods.\n\n```{python}\n# Accessing elements in PyTorch tensor\nprint(tensor[1, 2])  # Output: 6\n\n# Accessing elements in Numpy array\nprint(array[1, 2])  # Output: 6\n```\n\n## Basic Operations\n\nBasic operations such as addition, subtraction, multiplication, and division can be easily performed on PyTorch tensors and Numpy arrays.\n\n```{python}\n# Perform addition on PyTorch tensor\ntensor_sum = tensor + tensor\nprint(tensor_sum)\n\n# Perform addition on Numpy array\narray_sum = array + array\nprint(array_sum)\n```\n\nBoth the tensor_sum and array_sum will output the element-wise sum of their respective objects.\n\n## Shape and Reshaping\n\nThe shape and reshaping of tensors and arrays are crucial operations in both libraries. Here's how we can determine the shape of a tensor/array and reshape it:\n\n```{python}\n# Shape of PyTorch tensor\nprint(tensor.shape)  # Output: torch.Size([2, 3])\n\n# Shape of Numpy array\nprint(array.shape)  # Output: (2, 3)\n\n# Reshaping PyTorch tensor\ntensor_reshaped = tensor.view(3, 2)\nprint(tensor_reshaped)\n\n# Reshaping Numpy array\narray_reshaped = array.reshape(3, 2)\nprint(array_reshaped)\n```\n\n## Automatic Differentiation\n\nOne of the key advantages of PyTorch over Numpy is its ability to perform automatic differentiation. It makes training deep learning models much easier by computing gradients automatically.\n\n```{python}\n# Enable automatic differentiation in PyTorch\ntensor = torch.tensor([[1., 2., 3.], [4., 5., 6.]], requires_grad=True)\n\n# Perform a forward operation\noutput = tensor.sum()\n\n# Perform automatic differentiation\noutput.backward()\n\n# Access the gradients\nprint(tensor.grad)\n```\n\nThe `requires_grad=True` argument enables the computation of gradients for the tensor. The `output.backward()` function computes the gradients of `output` with respect to all tensors that have `requires_grad=True`. Finally, `tensor.grad` retrieves the gradients.\n\nThese are some of the similarities between PyTorch and Numpy. Understanding these similarities can make it easier for beginners to transition from Numpy to PyTorch.","srcMarkdownNoYaml":"\n\n\nSure! PyTorch is a popular open-source machine learning library for Python. It provides an efficient and flexible framework for building deep learning models. Many beginners in PyTorch are already familiar with Numpy, which is another Python library used for numerical computing. In this tutorial, we will introduce PyTorch using the similarities between PyTorch and Numpy.\n\nTo begin, let's start by installing PyTorch using the following command:\n\n```{python}\n#| eval: false \n!pip install torch\n```\n\nAfter installing PyTorch, we can import it into our Python code using the following line:\n\n```{python}\nimport torch\n```\n\nNow, let's draw some comparisons between PyTorch and Numpy.\n\n## Tensors and Arrays\n\nPyTorch uses tensors to store and manipulate data, while Numpy uses arrays. Tensors and arrays behave similarly and share many common operations. For example, creating a tensor/array, accessing elements, and performing basic operations are done in a similar way.\n\nLet's compare how we can create a tensor and an array in PyTorch and Numpy respectively:\n\n```{python}\n# Creating a PyTorch tensor\ntensor = torch.tensor([[1, 2, 3], [4, 5, 6]])\nprint(tensor)\n\n# Creating a Numpy array\nimport numpy as np\narray = np.array([[1, 2, 3], [4, 5, 6]])\nprint(array)\n```\n\nBoth the PyTorch tensor and Numpy array store data in a multi-dimensional structure.\n\n## Accessing Elements\n\nAccessing elements in PyTorch tensors and Numpy arrays is similar, as both use indexing and slicing methods.\n\n```{python}\n# Accessing elements in PyTorch tensor\nprint(tensor[1, 2])  # Output: 6\n\n# Accessing elements in Numpy array\nprint(array[1, 2])  # Output: 6\n```\n\n## Basic Operations\n\nBasic operations such as addition, subtraction, multiplication, and division can be easily performed on PyTorch tensors and Numpy arrays.\n\n```{python}\n# Perform addition on PyTorch tensor\ntensor_sum = tensor + tensor\nprint(tensor_sum)\n\n# Perform addition on Numpy array\narray_sum = array + array\nprint(array_sum)\n```\n\nBoth the tensor_sum and array_sum will output the element-wise sum of their respective objects.\n\n## Shape and Reshaping\n\nThe shape and reshaping of tensors and arrays are crucial operations in both libraries. Here's how we can determine the shape of a tensor/array and reshape it:\n\n```{python}\n# Shape of PyTorch tensor\nprint(tensor.shape)  # Output: torch.Size([2, 3])\n\n# Shape of Numpy array\nprint(array.shape)  # Output: (2, 3)\n\n# Reshaping PyTorch tensor\ntensor_reshaped = tensor.view(3, 2)\nprint(tensor_reshaped)\n\n# Reshaping Numpy array\narray_reshaped = array.reshape(3, 2)\nprint(array_reshaped)\n```\n\n## Automatic Differentiation\n\nOne of the key advantages of PyTorch over Numpy is its ability to perform automatic differentiation. It makes training deep learning models much easier by computing gradients automatically.\n\n```{python}\n# Enable automatic differentiation in PyTorch\ntensor = torch.tensor([[1., 2., 3.], [4., 5., 6.]], requires_grad=True)\n\n# Perform a forward operation\noutput = tensor.sum()\n\n# Perform automatic differentiation\noutput.backward()\n\n# Access the gradients\nprint(tensor.grad)\n```\n\nThe `requires_grad=True` argument enables the computation of gradients for the tensor. The `output.backward()` function computes the gradients of `output` with respect to all tensors that have `requires_grad=True`. Finally, `tensor.grad` retrieves the gradients.\n\nThese are some of the similarities between PyTorch and Numpy. Understanding these similarities can make it easier for beginners to transition from Numpy to PyTorch."},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":true,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":false,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../styles.css"],"toc":true,"output-file":"pytorch_intro.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.55","theme":"cosmo","title":"","jupyter":"python3"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html","revealjs"]}