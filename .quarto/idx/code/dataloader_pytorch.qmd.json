{"markdown":{"yaml":{"title":"","format":{"html":{"code-fold":false}},"jupyter":"python3","execute":{"cache":true}},"containsRefs":false,"markdown":"\n\n\nTo work with custom datasets in PyTorch, we need to create a custom dataset class and then use a data loader to load the data in mini-batches during training or evaluation. In this tutorial, we will create a custom randomly generated dataset and load it using a data loader.\n\nFirst, let's install the necessary packages and import the required libraries:\n\n```{python}\nimport torch\nfrom torch.utils.data import Dataset, DataLoader\n```\n\nNext, we will create a custom dataset class by subclassing the `Dataset` class provided by PyTorch. In this example, let's create a dataset of randomly generated 2D points with corresponding labels:\n\n```{python}\nclass CustomDataset(Dataset):\n    def __init__(self, num_samples):\n        self.num_samples = num_samples\n        # data is from 0 to num_samples-1\n        self.data = torch.arange(num_samples)\n        self.labels = (self.data%2==0).long()\n\n    def __len__(self):\n        return self.num_samples\n\n    def __getitem__(self, idx):\n        sample = self.data[idx]\n        label = self.labels[idx]\n        return sample, label\n```\n\nIn the `__init__` method of our `CustomDataset` class, we initialize the number of samples and number of features. We then generate random data points and labels using the `torch.randn` and `torch.randint` functions, respectively.\n\nThe `__len__` method is used to return the total number of samples in the dataset.\n\nThe `__getitem__` method is used to access a particular sample and its label given an index. We retrieve the corresponding data point and label from the pre-generated data and labels tensors, and return them as a tuple.\n\nNow, let's create an instance of our custom dataset:\n\n```{python}\ndataset = CustomDataset(num_samples=20)\nprint(dataset[0])\nprint(dataset[1])\n```\n\nLet's visualize the dataset.\n```{python}\nimport matplotlib.pyplot as plt\nplt.scatter(dataset.data, dataset.labels)\nplt.xlabel('inputs')\nplt.ylabel('labels')\n```\n\n\nWe have created a dataset with 20 samples.\n\nFinally, we can create a data loader to load our custom dataset in mini-batches:\n\n```{python}\ndataloader = DataLoader(dataset, batch_size=8, shuffle=False, drop_last=False)\n```\n\nThe `DataLoader` class takes our custom dataset as input along with the desired batch size. \n\n```{python}\nfor batch in dataloader:\n    inputs, labels = batch\n    print(f'inputs: {inputs}')\n    print(f'labels: {labels}\\n')\n```\n\nIn each iteration, the data loader returns a batch of samples, where `inputs` contains the features of the samples and `labels` contains their corresponding labels. We can now perform any required operations on the mini-batch, such as passing it through a model for training or evaluation.\n\nYou can see that by default, the `Dataloader` class returns the dataset in mini-batches without changing the order of the data. \n\nWe can set the `shuffle` parameter to `True` if we want to shuffle the data before each epoch. Suffling the training data can prevent the model from relying on the order of the data points to predict the labels.\n\n```{python}\ndataloader = DataLoader(dataset, batch_size=8, shuffle=True, drop_last=False)\nfor batch in dataloader:\n    inputs, labels = batch\n    print(f'inputs: {inputs}')\n    print(f'labels: {labels}\\n')\n```\n\nFor specific models that rely on the `batch_size` to construct their parameters (see [RNNs](RNN_timeseries.qmd)), we need to set `drop_last` to `True` to prevent batches having different shapes.\n\n```{python}\ndataloader = DataLoader(dataset, batch_size=8, shuffle=True, drop_last=True)\nfor batch in dataloader:\n    inputs, labels = batch\n    print(f'inputs: {inputs}')\n    print(f'labels: {labels}\\n')\n```\n\nYou can see that by setting `drop_last=True`, the final mini-batch of size $4$ is dropped.\n\n\nThat's it! You have learned how to create a custom dataset and load it using a data loader in PyTorch.","srcMarkdownNoYaml":"\n\n\nTo work with custom datasets in PyTorch, we need to create a custom dataset class and then use a data loader to load the data in mini-batches during training or evaluation. In this tutorial, we will create a custom randomly generated dataset and load it using a data loader.\n\nFirst, let's install the necessary packages and import the required libraries:\n\n```{python}\nimport torch\nfrom torch.utils.data import Dataset, DataLoader\n```\n\nNext, we will create a custom dataset class by subclassing the `Dataset` class provided by PyTorch. In this example, let's create a dataset of randomly generated 2D points with corresponding labels:\n\n```{python}\nclass CustomDataset(Dataset):\n    def __init__(self, num_samples):\n        self.num_samples = num_samples\n        # data is from 0 to num_samples-1\n        self.data = torch.arange(num_samples)\n        self.labels = (self.data%2==0).long()\n\n    def __len__(self):\n        return self.num_samples\n\n    def __getitem__(self, idx):\n        sample = self.data[idx]\n        label = self.labels[idx]\n        return sample, label\n```\n\nIn the `__init__` method of our `CustomDataset` class, we initialize the number of samples and number of features. We then generate random data points and labels using the `torch.randn` and `torch.randint` functions, respectively.\n\nThe `__len__` method is used to return the total number of samples in the dataset.\n\nThe `__getitem__` method is used to access a particular sample and its label given an index. We retrieve the corresponding data point and label from the pre-generated data and labels tensors, and return them as a tuple.\n\nNow, let's create an instance of our custom dataset:\n\n```{python}\ndataset = CustomDataset(num_samples=20)\nprint(dataset[0])\nprint(dataset[1])\n```\n\nLet's visualize the dataset.\n```{python}\nimport matplotlib.pyplot as plt\nplt.scatter(dataset.data, dataset.labels)\nplt.xlabel('inputs')\nplt.ylabel('labels')\n```\n\n\nWe have created a dataset with 20 samples.\n\nFinally, we can create a data loader to load our custom dataset in mini-batches:\n\n```{python}\ndataloader = DataLoader(dataset, batch_size=8, shuffle=False, drop_last=False)\n```\n\nThe `DataLoader` class takes our custom dataset as input along with the desired batch size. \n\n```{python}\nfor batch in dataloader:\n    inputs, labels = batch\n    print(f'inputs: {inputs}')\n    print(f'labels: {labels}\\n')\n```\n\nIn each iteration, the data loader returns a batch of samples, where `inputs` contains the features of the samples and `labels` contains their corresponding labels. We can now perform any required operations on the mini-batch, such as passing it through a model for training or evaluation.\n\nYou can see that by default, the `Dataloader` class returns the dataset in mini-batches without changing the order of the data. \n\nWe can set the `shuffle` parameter to `True` if we want to shuffle the data before each epoch. Suffling the training data can prevent the model from relying on the order of the data points to predict the labels.\n\n```{python}\ndataloader = DataLoader(dataset, batch_size=8, shuffle=True, drop_last=False)\nfor batch in dataloader:\n    inputs, labels = batch\n    print(f'inputs: {inputs}')\n    print(f'labels: {labels}\\n')\n```\n\nFor specific models that rely on the `batch_size` to construct their parameters (see [RNNs](RNN_timeseries.qmd)), we need to set `drop_last` to `True` to prevent batches having different shapes.\n\n```{python}\ndataloader = DataLoader(dataset, batch_size=8, shuffle=True, drop_last=True)\nfor batch in dataloader:\n    inputs, labels = batch\n    print(f'inputs: {inputs}')\n    print(f'labels: {labels}\\n')\n```\n\nYou can see that by setting `drop_last=True`, the final mini-batch of size $4$ is dropped.\n\n\nThat's it! You have learned how to create a custom dataset and load it using a data loader in PyTorch."},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":true,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":false,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../styles.css"],"toc":true,"output-file":"dataloader_pytorch.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.55","theme":"cosmo","title":"","jupyter":"python3"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html","revealjs"]}