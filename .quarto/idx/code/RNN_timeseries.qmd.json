{"title":"Set random seed for reproducibility","markdown":{"yaml":{"title":"","format":{"html":{"code-fold":false}},"jupyter":"python3","execute":{"cache":true}},"headingText":"Set random seed for reproducibility","containsRefs":false,"markdown":"\n\n\nIn this tutorial, I will explain how to use a Recurrent Neural Network (RNN) to predict time series data using the PyTorch library. \n\nFirst, let's start by installing the required packages. We need to install PyTorch and matplotlib for visualization.\n\n```\n!pip install torch\n!pip install matplotlib\n```\n\nNow that we have the necessary packages installed, let's import them into our code.\n\n```{python}\nimport matplotlib.pyplot as plt\n```\n\n```{python}\nimport torch\nimport torch.nn as nn\nimport numpy as np\nimport matplotlib.pyplot as plt\n```\n\nThe next step is to generate some synthetic time series data for training our model. We will generate a sine wave with some added noise.\n\n```{python}\ntorch.manual_seed(0)\n\n# Generate time points\nnum_points = 1000\nt = torch.arange(0, num_points)\n\n# Generate sine wave\nvalue = torch.sin(0.1*t)\n\n# Add noise\nvalue += 0.2*torch.randn(num_points)\n```\n\nLet's visualize the generated time series using matplotlib.\n\n```{python}\nplt.figure(figsize=(10, 6))\n# using .tolist method instead of\n# .numpy() because of dependency issues\n# in numpy>2 and torch>2\nplt.plot(t, value)\nplt.xlabel('Time')\nplt.ylabel('Value')\nplt.title('Time Series Data')\nplt.show()\n```\n\nNow, we need to prepare our data for training the RNN. We will split the data into input sequences and corresponding output sequences. Each input sequence will contain a certain number of time steps (e.g., 10), and the corresponding output sequence will be the next time step.\n\n```{python}\n# Define number of time steps for input sequence\nnum_steps = 10\n\n# Split data into input and output sequences\nx = []\ny = []\nfor i in range(len(value) - num_steps):\n    # creating list of x; each item has num_steps values\n    x.append(value[i:i+num_steps])\n    # creating list of y; each item has the next value\n    y.append(value[i+num_steps])\n\n# Convert data to PyTorch tensors\n# turning list x to tensor & adding new dimension (input size) at the end\nx = torch.stack(x)[..., None]\n# turning list y to tensor & adding new dimension at the end\ny = torch.stack(y)[..., None]\n\nx_train = x[0:100]\nx_test = x[100:]\n\ny_train = y[0:100]\ny_test = y[100:]\n\nprint(x_train.shape)\nprint(y_train.shape)\n```\n\nNext, we need to define our RNN model using the nn.RNN module from PyTorch.\n\n```{python}\n# Define RNN model\nclass RNN(nn.Module):\n    def __init__(self, input_size, hidden_size, output_size):\n        super(RNN, self).__init__()\n        self.hidden_size = hidden_size\n        # If batch_first=True, then the input and output tensors are provided as (batch, seq, feature)\n        self.rnn = nn.RNN(input_size, hidden_size, batch_first=True)\n        # nn.Linear to transform hidden state from hidden_size to output_size\n        self.fc = nn.Linear(hidden_size, output_size)\n    \n    def init_h(self, x):\n        '''\n        To initialize the hidden state for the first iteration\n        shape: d x num_layers, N, H if input is batched (our case)\n        shape: d x num_layers, H if input not batched\n        d: 2 if bidirectional else 1\n        N: batch size\n        H: hidden_size\n        num_layers: number of RNN layers\n        '''\n        batch_size = x.shape[0]\n        self.h0 = torch.zeros(1, batch_size, self.hidden_size, requires_grad=True)\n        return self.h0\n\n    def forward(self, x, hidden):\n        # shape: N, L, DxH \n        # shape: 990, 10, 16\n        out, hidden = self.rnn(x, hidden)\n        # choose the last output of out: out[:, -1, :]\n        # pass it to the fc layer\n        out = self.fc(out[:, -1, :])\n        return out, hidden\n\n# Create an instance of the RNN model\ninput_size = 1\nhidden_size = 16\noutput_size = 1\nmodel = RNN(input_size, hidden_size, output_size)\n```\n\nNote that the `self.fc = nn.Linear(hidden_size, output_size)` transforms the hidden state from `hidden_size` to `output_size`. This is a useful use case of fully connected layers, which helps us transform our feature space from $n$ dimensions to $n\\prime$ dimensions.\n\n\nBefore training our model, we need to define the loss function and optimizer.\n\n```{python}\n# Define loss function and optimizer\ncriterion = nn.MSELoss()\noptimizer = torch.optim.Adam(model.parameters(), lr=0.01)\n```\n\nNow, we can train our RNN model using a loop. We will iterate over the data for a certain number of epochs and update the model parameters based on the computed loss.\n\n```{python}\n# Set number of epochs\nnum_epochs = 100\n# initialize the hidden state\nh = model.init_h(x_train)\n# Train the model\nfor epoch in range(num_epochs):\n    # Forward pass\n    output, h = model(x_train, h)\n    loss = criterion(output, y_train)\n    \n    # Backward and optimize\n    loss.backward()\n    optimizer.step()\n    # set the gradients of the model tensors to zero\n    optimizer.zero_grad()\n    # detach h from the computation graph\n    h.detach_()\n    \n    # Print progress\n    if (epoch+1) % 10 == 0:\n        print(f'Epoch [{epoch+1}/{num_epochs}], Loss: {loss.item():.4f}')\n```\n\nFinally, let's visualize the predicted values and compare them with the ground truth.\n\n```{python}\nh = model.init_h(x_test)\n# Generate predictions\nwith torch.no_grad():\n    y_pred, h = model(x_test, h)\n# Plot the results\nplt.figure(figsize=(10, 6))\nplt.plot(t.tolist(), value.tolist(), label='Ground Truth')\nplt.plot(t[10:110].tolist(), output.detach().tolist(), label='Predicted train')\nplt.plot(t[110:].tolist(), y_pred.detach().tolist(), label='Predicted test')\nplt.xlabel('Time')\nplt.ylabel('Value')\nplt.title('Time Series Prediction')\nplt.legend()\nplt.show()\n```\n","srcMarkdownNoYaml":"\n\n\nIn this tutorial, I will explain how to use a Recurrent Neural Network (RNN) to predict time series data using the PyTorch library. \n\nFirst, let's start by installing the required packages. We need to install PyTorch and matplotlib for visualization.\n\n```\n!pip install torch\n!pip install matplotlib\n```\n\nNow that we have the necessary packages installed, let's import them into our code.\n\n```{python}\nimport matplotlib.pyplot as plt\n```\n\n```{python}\nimport torch\nimport torch.nn as nn\nimport numpy as np\nimport matplotlib.pyplot as plt\n```\n\nThe next step is to generate some synthetic time series data for training our model. We will generate a sine wave with some added noise.\n\n```{python}\n# Set random seed for reproducibility\ntorch.manual_seed(0)\n\n# Generate time points\nnum_points = 1000\nt = torch.arange(0, num_points)\n\n# Generate sine wave\nvalue = torch.sin(0.1*t)\n\n# Add noise\nvalue += 0.2*torch.randn(num_points)\n```\n\nLet's visualize the generated time series using matplotlib.\n\n```{python}\nplt.figure(figsize=(10, 6))\n# using .tolist method instead of\n# .numpy() because of dependency issues\n# in numpy>2 and torch>2\nplt.plot(t, value)\nplt.xlabel('Time')\nplt.ylabel('Value')\nplt.title('Time Series Data')\nplt.show()\n```\n\nNow, we need to prepare our data for training the RNN. We will split the data into input sequences and corresponding output sequences. Each input sequence will contain a certain number of time steps (e.g., 10), and the corresponding output sequence will be the next time step.\n\n```{python}\n# Define number of time steps for input sequence\nnum_steps = 10\n\n# Split data into input and output sequences\nx = []\ny = []\nfor i in range(len(value) - num_steps):\n    # creating list of x; each item has num_steps values\n    x.append(value[i:i+num_steps])\n    # creating list of y; each item has the next value\n    y.append(value[i+num_steps])\n\n# Convert data to PyTorch tensors\n# turning list x to tensor & adding new dimension (input size) at the end\nx = torch.stack(x)[..., None]\n# turning list y to tensor & adding new dimension at the end\ny = torch.stack(y)[..., None]\n\nx_train = x[0:100]\nx_test = x[100:]\n\ny_train = y[0:100]\ny_test = y[100:]\n\nprint(x_train.shape)\nprint(y_train.shape)\n```\n\nNext, we need to define our RNN model using the nn.RNN module from PyTorch.\n\n```{python}\n# Define RNN model\nclass RNN(nn.Module):\n    def __init__(self, input_size, hidden_size, output_size):\n        super(RNN, self).__init__()\n        self.hidden_size = hidden_size\n        # If batch_first=True, then the input and output tensors are provided as (batch, seq, feature)\n        self.rnn = nn.RNN(input_size, hidden_size, batch_first=True)\n        # nn.Linear to transform hidden state from hidden_size to output_size\n        self.fc = nn.Linear(hidden_size, output_size)\n    \n    def init_h(self, x):\n        '''\n        To initialize the hidden state for the first iteration\n        shape: d x num_layers, N, H if input is batched (our case)\n        shape: d x num_layers, H if input not batched\n        d: 2 if bidirectional else 1\n        N: batch size\n        H: hidden_size\n        num_layers: number of RNN layers\n        '''\n        batch_size = x.shape[0]\n        self.h0 = torch.zeros(1, batch_size, self.hidden_size, requires_grad=True)\n        return self.h0\n\n    def forward(self, x, hidden):\n        # shape: N, L, DxH \n        # shape: 990, 10, 16\n        out, hidden = self.rnn(x, hidden)\n        # choose the last output of out: out[:, -1, :]\n        # pass it to the fc layer\n        out = self.fc(out[:, -1, :])\n        return out, hidden\n\n# Create an instance of the RNN model\ninput_size = 1\nhidden_size = 16\noutput_size = 1\nmodel = RNN(input_size, hidden_size, output_size)\n```\n\nNote that the `self.fc = nn.Linear(hidden_size, output_size)` transforms the hidden state from `hidden_size` to `output_size`. This is a useful use case of fully connected layers, which helps us transform our feature space from $n$ dimensions to $n\\prime$ dimensions.\n\n\nBefore training our model, we need to define the loss function and optimizer.\n\n```{python}\n# Define loss function and optimizer\ncriterion = nn.MSELoss()\noptimizer = torch.optim.Adam(model.parameters(), lr=0.01)\n```\n\nNow, we can train our RNN model using a loop. We will iterate over the data for a certain number of epochs and update the model parameters based on the computed loss.\n\n```{python}\n# Set number of epochs\nnum_epochs = 100\n# initialize the hidden state\nh = model.init_h(x_train)\n# Train the model\nfor epoch in range(num_epochs):\n    # Forward pass\n    output, h = model(x_train, h)\n    loss = criterion(output, y_train)\n    \n    # Backward and optimize\n    loss.backward()\n    optimizer.step()\n    # set the gradients of the model tensors to zero\n    optimizer.zero_grad()\n    # detach h from the computation graph\n    h.detach_()\n    \n    # Print progress\n    if (epoch+1) % 10 == 0:\n        print(f'Epoch [{epoch+1}/{num_epochs}], Loss: {loss.item():.4f}')\n```\n\nFinally, let's visualize the predicted values and compare them with the ground truth.\n\n```{python}\nh = model.init_h(x_test)\n# Generate predictions\nwith torch.no_grad():\n    y_pred, h = model(x_test, h)\n# Plot the results\nplt.figure(figsize=(10, 6))\nplt.plot(t.tolist(), value.tolist(), label='Ground Truth')\nplt.plot(t[10:110].tolist(), output.detach().tolist(), label='Predicted train')\nplt.plot(t[110:].tolist(), y_pred.detach().tolist(), label='Predicted test')\nplt.xlabel('Time')\nplt.ylabel('Value')\nplt.title('Time Series Prediction')\nplt.legend()\nplt.show()\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":true,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":false,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../styles.css"],"toc":true,"output-file":"RNN_timeseries.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.55","theme":"cosmo","title":"","jupyter":"python3"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html","revealjs"]}