
---
title: ""
format:
  html:
    code-fold: false
jupyter: python3
execute: 
  cache: true
---


In PyTorch, the `torch.utils.data.Dataset` class is used to represent a dataset. It provides an interface to access individual samples in the dataset, which can be used to train and evaluate machine learning models. This class is an abstract class, so we need to create a custom class that inherits from it and implements two methods: `__len__` and `__getitem__`.

To create a custom randomly generated dataset, we need to define a class that generates random samples and labels. Let's assume that we want to generate random 2D points along with their corresponding labels. The labels can be either 0 or 1, indicating two different classes.

Here's an example implementation of the custom dataset class:

```{python}
import torch
from torch.utils.data import Dataset

class RandomDataset(Dataset):
    def __init__(self, num_samples, num_features):
        self.num_samples = num_samples
        self.num_features = num_features
        self.data = torch.randn(num_samples, num_features)
        # Randomly assign labels of 0 or 1
        self.targets = torch.randint(0, 2, (num_samples,))
    
    def __len__(self):
        return self.num_samples
    
    def __getitem__(self, index):
        sample = self.data[index]
        label = self.targets[index]
        return sample, label
```

Let's break down the code step by step:

1. Import the necessary modules: `torch` and `torch.utils.data.Dataset`.

2. Define a custom class called `RandomDataset` that inherits from `Dataset`.

3. In the class constructor (`__init__` method), we pass the number of samples (`num_samples`) and the number of features (`num_features`) as parameters.

4. Inside the constructor, we generate random data using `torch.randn` with dimensions (`num_samples`, `num_features`). This will create a tensor of random floating-point values.

5. We also generate random labels using `torch.randint` with values between 0 and 1 (exclusive), and shape (`num_samples`,). This will create a tensor with integer labels.

6. Implement the `__len__` method, which returns the number of samples in the dataset (`num_samples`).

7. Implement the `__getitem__` method, which takes an index as input and returns the corresponding sample and label. This method is used to access individual samples in the dataset. Inside this method, we use the index to retrieve the sample and label from the data and targets tensors, respectively.

Now, we can create an instance of the `RandomDataset` class and use it as a regular dataset in PyTorch.

```{python}
# Instantiate the custom dataset
dataset = RandomDataset(num_samples=1000, num_features=2)

# Access an individual sample and its label
sample, label = dataset[0]
print("Sample:", sample)
print("Label:", label)
```

This will output the first sample and its corresponding label from the dataset. You can access any sample by using the index in the same way.

By defining a custom dataset class, we can generate random datasets with specific characteristics and use them for training and evaluating machine learning models in PyTorch.