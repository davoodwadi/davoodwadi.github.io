
---
title: ""
format:
  html:
    code-fold: false
jupyter: python3
execute: 
  cache: true
---


Sure! PyTorch is a popular open-source machine learning library for Python. It provides an efficient and flexible framework for building deep learning models. Many beginners in PyTorch are already familiar with Numpy, which is another Python library used for numerical computing. In this tutorial, we will introduce PyTorch using the similarities between PyTorch and Numpy.

To begin, let's start by installing PyTorch using the following command:

```{python}
#| eval: false 
!pip install torch
```

After installing PyTorch, we can import it into our Python code using the following line:

```{python}
import torch
```

Now, let's draw some comparisons between PyTorch and Numpy.

## Tensors and Arrays

PyTorch uses tensors to store and manipulate data, while Numpy uses arrays. Tensors and arrays behave similarly and share many common operations. For example, creating a tensor/array, accessing elements, and performing basic operations are done in a similar way.

Let's compare how we can create a tensor and an array in PyTorch and Numpy respectively:

```{python}
# Creating a PyTorch tensor
tensor = torch.tensor([[1, 2, 3], [4, 5, 6]])
print(tensor)

# Creating a Numpy array
import numpy as np
array = np.array([[1, 2, 3], [4, 5, 6]])
print(array)
```

Both the PyTorch tensor and Numpy array store data in a multi-dimensional structure.

## Accessing Elements

Accessing elements in PyTorch tensors and Numpy arrays is similar, as both use indexing and slicing methods.

```{python}
# Accessing elements in PyTorch tensor
print(tensor[1, 2])  # Output: 6

# Accessing elements in Numpy array
print(array[1, 2])  # Output: 6
```

## Basic Operations

Basic operations such as addition, subtraction, multiplication, and division can be easily performed on PyTorch tensors and Numpy arrays.

```{python}
# Perform addition on PyTorch tensor
tensor_sum = tensor + tensor
print(tensor_sum)

# Perform addition on Numpy array
array_sum = array + array
print(array_sum)
```

Both the tensor_sum and array_sum will output the element-wise sum of their respective objects.

## Shape and Reshaping

The shape and reshaping of tensors and arrays are crucial operations in both libraries. Here's how we can determine the shape of a tensor/array and reshape it:

```{python}
# Shape of PyTorch tensor
print(tensor.shape)  # Output: torch.Size([2, 3])

# Shape of Numpy array
print(array.shape)  # Output: (2, 3)

# Reshaping PyTorch tensor
tensor_reshaped = tensor.view(3, 2)
print(tensor_reshaped)

# Reshaping Numpy array
array_reshaped = array.reshape(3, 2)
print(array_reshaped)
```

## Automatic Differentiation

One of the key advantages of PyTorch over Numpy is its ability to perform automatic differentiation. It makes training deep learning models much easier by computing gradients automatically.

```{python}
# Enable automatic differentiation in PyTorch
tensor = torch.tensor([[1., 2., 3.], [4., 5., 6.]], requires_grad=True)

# Perform a forward operation
output = tensor.sum()

# Perform automatic differentiation
output.backward()

# Access the gradients
print(tensor.grad)
```

The `requires_grad=True` argument enables the computation of gradients for the tensor. The `output.backward()` function computes the gradients of `output` with respect to all tensors that have `requires_grad=True`. Finally, `tensor.grad` retrieves the gradients.

These are some of the similarities between PyTorch and Numpy. Understanding these similarities can make it easier for beginners to transition from Numpy to PyTorch.